// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known schemas and tables in the Gaia database.

#[cfg(not(doctest))]
#[cfg(any(
    feature = "external",
    feature = "external_apassdr9",
    feature = "external_catwise2020",
    feature = "external_gaiadr2_astrophysical_parameters",
    feature = "external_gaiadr2_geometric_distance",
    feature = "external_gaiaedr3_distance",
    feature = "external_gaiaedr3_gcns_main_1",
    feature = "external_gaiaedr3_gcns_rejected_1",
    feature = "external_gaiaedr3_spurious",
    feature = "external_gaia_eso_survey",
    feature = "external_galex_ais",
    feature = "external_lamost_dr9_lrs",
    feature = "external_lamost_dr9_mrs",
    feature = "external_ravedr5_com",
    feature = "external_ravedr5_dr5",
    feature = "external_ravedr5_gra",
    feature = "external_ravedr5_on",
    feature = "external_ravedr6",
    feature = "external_sdssdr13_photoprimary",
    feature = "external_skymapperdr1_master",
    feature = "external_skymapperdr2_master",
    feature = "external_tmass_xsc",
    feature = "external_xgboost_table1",
    feature = "external_xgboost_table2",
    test
))]
pub mod external;
#[cfg(not(doctest))]
#[cfg(any(
    feature = "gaiadr1",
    feature = "gaiadr1_aux_qso_icrf2_match",
    feature = "gaiadr1_ext_phot_zero_point",
    feature = "gaiadr1_allwise_best_neighbour",
    feature = "gaiadr1_allwise_neighbourhood",
    feature = "gaiadr1_gsc23_best_neighbour",
    feature = "gaiadr1_gsc23_neighbourhood",
    feature = "gaiadr1_ppmxl_best_neighbour",
    feature = "gaiadr1_ppmxl_neighbourhood",
    feature = "gaiadr1_sdss_dr9_best_neighbour",
    feature = "gaiadr1_sdss_dr9_neighbourhood",
    feature = "gaiadr1_tmass_best_neighbour",
    feature = "gaiadr1_tmass_neighbourhood",
    feature = "gaiadr1_ucac4_best_neighbour",
    feature = "gaiadr1_ucac4_neighbourhood",
    feature = "gaiadr1_urat1_best_neighbour",
    feature = "gaiadr1_urat1_neighbourhood",
    feature = "gaiadr1_cepheid",
    feature = "gaiadr1_phot_variable_time_series_gfov",
    feature = "gaiadr1_phot_variable_time_series_gfov_statistical_parameters",
    feature = "gaiadr1_rrlyrae",
    feature = "gaiadr1_variable_summary",
    feature = "gaiadr1_allwise_original_valid",
    feature = "gaiadr1_gsc23_original_valid",
    feature = "gaiadr1_ppmxl_original_valid",
    feature = "gaiadr1_sdssdr9_original_valid",
    feature = "gaiadr1_tmass_original_valid",
    feature = "gaiadr1_ucac4_original_valid",
    feature = "gaiadr1_urat1_original_valid",
    feature = "gaiadr1_gaia_source",
    feature = "gaiadr1_tgas_source",
    test
))]
pub mod gaiadr1;
#[cfg(not(doctest))]
#[cfg(any(
    feature = "gaiadr2",
    feature = "gaiadr2_aux_allwise_agn_gdr2_cross_id",
    feature = "gaiadr2_aux_iers_gdr2_cross_id",
    feature = "gaiadr2_aux_sso_orbit_residuals",
    feature = "gaiadr2_aux_sso_orbits",
    feature = "gaiadr2_dr1_neighbourhood",
    feature = "gaiadr2_allwise_best_neighbour",
    feature = "gaiadr2_allwise_neighbourhood",
    feature = "gaiadr2_apassdr9_best_neighbour",
    feature = "gaiadr2_apassdr9_neighbourhood",
    feature = "gaiadr2_gsc23_best_neighbour",
    feature = "gaiadr2_gsc23_neighbourhood",
    feature = "gaiadr2_hipparcos2_best_neighbour",
    feature = "gaiadr2_hipparcos2_neighbourhood",
    feature = "gaiadr2_panstarrs1_best_neighbour",
    feature = "gaiadr2_panstarrs1_neighbourhood",
    feature = "gaiadr2_ppmxl_best_neighbour",
    feature = "gaiadr2_ppmxl_neighbourhood",
    feature = "gaiadr2_ravedr5_best_neighbour",
    feature = "gaiadr2_ravedr5_neighbourhood",
    feature = "gaiadr2_sdssdr9_best_neighbour",
    feature = "gaiadr2_sdssdr9_neighbourhood",
    feature = "gaiadr2_tmass_best_neighbour",
    feature = "gaiadr2_tmass_neighbourhood",
    feature = "gaiadr2_tycho2_best_neighbour",
    feature = "gaiadr2_tycho2_neighbourhood",
    feature = "gaiadr2_urat1_best_neighbour",
    feature = "gaiadr2_urat1_neighbourhood",
    feature = "gaiadr2_sso_observation",
    feature = "gaiadr2_sso_source",
    feature = "gaiadr2_vari_cepheid",
    feature = "gaiadr2_vari_classifier_class_definition",
    feature = "gaiadr2_vari_classifier_definition",
    feature = "gaiadr2_vari_classifier_result",
    feature = "gaiadr2_vari_long_period_variable",
    feature = "gaiadr2_vari_rotation_modulation",
    feature = "gaiadr2_vari_rrlyrae",
    feature = "gaiadr2_vari_short_timescale",
    feature = "gaiadr2_vari_time_series_statistics",
    feature = "gaiadr2_panstarrs1_original_valid",
    feature = "gaiadr2_gaia_source",
    feature = "gaiadr2_ruwe",
    test
))]
pub mod gaiadr2;
#[cfg(not(doctest))]
#[cfg(any(
    feature = "gaiadr3",
    feature = "gaiadr3_gaia_source",
    feature = "gaiadr3_gaia_source_lite",
    feature = "gaiadr3_astrophysical_parameters",
    feature = "gaiadr3_astrophysical_parameters_supp",
    feature = "gaiadr3_oa_neuron_information",
    feature = "gaiadr3_oa_neuron_xp_spectra",
    feature = "gaiadr3_total_galactic_extinction_map",
    feature = "gaiadr3_total_galactic_extinction_map_opt",
    feature = "gaiadr3_commanded_scan_law",
    feature = "gaiadr3_allwise_best_neighbour",
    feature = "gaiadr3_allwise_neighbourhood",
    feature = "gaiadr3_apassdr9_best_neighbour",
    feature = "gaiadr3_apassdr9_join",
    feature = "gaiadr3_apassdr9_neighbourhood",
    feature = "gaiadr3_dr2_neighbourhood",
    feature = "gaiadr3_gsc23_best_neighbour",
    feature = "gaiadr3_gsc23_join",
    feature = "gaiadr3_gsc23_neighbourhood",
    feature = "gaiadr3_hipparcos2_best_neighbour",
    feature = "gaiadr3_hipparcos2_neighbourhood",
    feature = "gaiadr3_panstarrs1_best_neighbour",
    feature = "gaiadr3_panstarrs1_join",
    feature = "gaiadr3_panstarrs1_neighbourhood",
    feature = "gaiadr3_ravedr5_best_neighbour",
    feature = "gaiadr3_ravedr5_join",
    feature = "gaiadr3_ravedr5_neighbourhood",
    feature = "gaiadr3_ravedr6_best_neighbour",
    feature = "gaiadr3_ravedr6_join",
    feature = "gaiadr3_ravedr6_neighbourhood",
    feature = "gaiadr3_sdssdr13_best_neighbour",
    feature = "gaiadr3_sdssdr13_join",
    feature = "gaiadr3_sdssdr13_neighbourhood",
    feature = "gaiadr3_skymapperdr2_best_neighbour",
    feature = "gaiadr3_skymapperdr2_join",
    feature = "gaiadr3_skymapperdr2_neighbourhood",
    feature = "gaiadr3_tmass_psc_xsc_best_neighbour",
    feature = "gaiadr3_tmass_psc_xsc_join",
    feature = "gaiadr3_tmass_psc_xsc_neighbourhood",
    feature = "gaiadr3_tycho2tdsc_merge_best_neighbour",
    feature = "gaiadr3_tycho2tdsc_merge_neighbourhood",
    feature = "gaiadr3_urat1_best_neighbour",
    feature = "gaiadr3_urat1_neighbourhood",
    feature = "gaiadr3_galaxy_candidates",
    feature = "gaiadr3_galaxy_catalogue_name",
    feature = "gaiadr3_qso_candidates",
    feature = "gaiadr3_qso_catalogue_name",
    feature = "gaiadr3_nss_acceleration_astro",
    feature = "gaiadr3_nss_non_linear_spectro",
    feature = "gaiadr3_nss_two_body_orbit",
    feature = "gaiadr3_nss_vim_fl",
    feature = "gaiadr3_binary_masses",
    feature = "gaiadr3_chemical_cartography",
    feature = "gaiadr3_gold_sample_carbon_stars",
    feature = "gaiadr3_gold_sample_fgkm_stars",
    feature = "gaiadr3_gold_sample_oba_stars",
    feature = "gaiadr3_gold_sample_solar_analogues",
    feature = "gaiadr3_gold_sample_spss",
    feature = "gaiadr3_gold_sample_ucd",
    feature = "gaiadr3_sso_orbits",
    feature = "gaiadr3_synthetic_photometry_gspc",
    feature = "gaiadr3_vari_spurious_signals",
    feature = "gaiadr3_agn_cross_id",
    feature = "gaiadr3_frame_rotator_source",
    feature = "gaiadr3_gaia_crf3_xm",
    feature = "gaiadr3_alerts_mixedin_sourceids",
    feature = "gaiadr3_science_alerts",
    feature = "gaiadr3_gaia_source_simulation",
    feature = "gaiadr3_gaia_universe_model",
    feature = "gaiadr3_sso_observation",
    feature = "gaiadr3_sso_reflectance_spectrum",
    feature = "gaiadr3_sso_source",
    feature = "gaiadr3_xp_summary",
    feature = "gaiadr3_vari_agn",
    feature = "gaiadr3_vari_cepheid",
    feature = "gaiadr3_vari_classifier_class_definition",
    feature = "gaiadr3_vari_classifier_definition",
    feature = "gaiadr3_vari_classifier_result",
    feature = "gaiadr3_vari_compact_companion",
    feature = "gaiadr3_vari_eclipsing_binary",
    feature = "gaiadr3_vari_epoch_radial_velocity",
    feature = "gaiadr3_vari_long_period_variable",
    feature = "gaiadr3_vari_microlensing",
    feature = "gaiadr3_vari_ms_oscillator",
    feature = "gaiadr3_vari_planetary_transit",
    feature = "gaiadr3_vari_planetary_transit_13june2022",
    feature = "gaiadr3_vari_rad_vel_statistics",
    feature = "gaiadr3_vari_rotation_modulation",
    feature = "gaiadr3_vari_rrlyrae",
    feature = "gaiadr3_vari_short_timescale",
    feature = "gaiadr3_vari_summary",
    feature = "gaiadr3_tycho2tdsc_merge",
    test
))]
pub mod gaiadr3;
#[cfg(not(doctest))]
#[cfg(any(
    feature = "gaiaedr3",
    feature = "gaiaedr3_gaia_source",
    feature = "gaiaedr3_agn_cross_id",
    feature = "gaiaedr3_commanded_scan_law",
    feature = "gaiaedr3_dr2_neighbourhood",
    feature = "gaiaedr3_frame_rotator_source",
    feature = "gaiaedr3_allwise_best_neighbour",
    feature = "gaiaedr3_allwise_neighbourhood",
    feature = "gaiaedr3_apassdr9_best_neighbour",
    feature = "gaiaedr3_apassdr9_join",
    feature = "gaiaedr3_apassdr9_neighbourhood",
    feature = "gaiaedr3_gsc23_best_neighbour",
    feature = "gaiaedr3_gsc23_join",
    feature = "gaiaedr3_gsc23_neighbourhood",
    feature = "gaiaedr3_hipparcos2_best_neighbour",
    feature = "gaiaedr3_hipparcos2_neighbourhood",
    feature = "gaiaedr3_panstarrs1_best_neighbour",
    feature = "gaiaedr3_panstarrs1_join",
    feature = "gaiaedr3_panstarrs1_neighbourhood",
    feature = "gaiaedr3_ravedr5_best_neighbour",
    feature = "gaiaedr3_ravedr5_join",
    feature = "gaiaedr3_ravedr5_neighbourhood",
    feature = "gaiaedr3_sdssdr13_best_neighbour",
    feature = "gaiaedr3_sdssdr13_join",
    feature = "gaiaedr3_sdssdr13_neighbourhood",
    feature = "gaiaedr3_skymapperdr2_best_neighbour",
    feature = "gaiaedr3_skymapperdr2_join",
    feature = "gaiaedr3_skymapperdr2_neighbourhood",
    feature = "gaiaedr3_tmass_psc_xsc_best_neighbour",
    feature = "gaiaedr3_tmass_psc_xsc_join",
    feature = "gaiaedr3_tmass_psc_xsc_neighbourhood",
    feature = "gaiaedr3_tycho2tdsc_merge_best_neighbour",
    feature = "gaiaedr3_tycho2tdsc_merge_neighbourhood",
    feature = "gaiaedr3_urat1_best_neighbour",
    feature = "gaiaedr3_urat1_neighbourhood",
    feature = "gaiaedr3_gaia_source_simulation",
    feature = "gaiaedr3_gaia_universe_model",
    feature = "gaiaedr3_tycho2tdsc_merge",
    test
))]
pub mod gaiaedr3;
#[cfg(not(doctest))]
#[cfg(any(
    feature = "gaiafpr",
    feature = "gaiafpr_crowded_field_source",
    feature = "gaiafpr_lens_candidates",
    feature = "gaiafpr_lens_catalogue_name",
    feature = "gaiafpr_lens_observation",
    feature = "gaiafpr_lens_outlier",
    feature = "gaiafpr_sso_observation",
    feature = "gaiafpr_sso_source",
    feature = "gaiafpr_interstellar_medium_params",
    feature = "gaiafpr_interstellar_medium_spectra",
    feature = "gaiafpr_vari_epoch_radial_velocity",
    feature = "gaiafpr_vari_long_period_variable",
    feature = "gaiafpr_vari_rad_vel_statistics",
    test
))]
pub mod gaiafpr;
#[cfg(not(doctest))]
#[cfg(any(feature = "job_upload", test))]
pub mod job_upload;
#[cfg(not(doctest))]
#[cfg(any(
    feature = "public",
    feature = "public_hipparcos",
    feature = "public_hipparcos_newreduction",
    feature = "public_hubble_sc",
    feature = "public_igsl_source",
    feature = "public_igsl_source_catalog_ids",
    feature = "public_tycho2",
    feature = "public_dual",
    test
))]
pub mod public;
#[cfg(not(doctest))]
#[cfg(any(
    feature = "tap_config",
    feature = "tap_config_coord_sys",
    feature = "tap_config_properties",
    test
))]
pub mod tap_config;
#[cfg(not(doctest))]
#[cfg(any(
    feature = "tap_schema",
    feature = "tap_schema_columns",
    feature = "tap_schema_key_columns",
    feature = "tap_schema_keys",
    feature = "tap_schema_schemas",
    feature = "tap_schema_tables",
    test
))]
pub mod tap_schema;
#[cfg(not(doctest))]
#[cfg(any(feature = "tap_upload", test))]
pub mod tap_upload;

#[cfg(test)]
/// Collects all the known schemas and tables in the Gaia database.
pub(crate) fn collect_known_schemas(
) -> std::collections::HashMap<String, std::collections::HashMap<String, Vec<String>>> {
    let mut known = std::collections::HashMap::new();
    external::collect_known(&mut known);
    gaiadr1::collect_known(&mut known);
    gaiadr2::collect_known(&mut known);
    gaiadr3::collect_known(&mut known);
    gaiaedr3::collect_known(&mut known);
    gaiafpr::collect_known(&mut known);
    job_upload::collect_known(&mut known);
    public::collect_known(&mut known);
    tap_config::collect_known(&mut known);
    tap_schema::collect_known(&mut known);
    tap_upload::collect_known(&mut known);
    known
}
