// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the aux_sso_orbit_residuals table.

use crate::traits::{Column, Table};

/// Residuals with respect to an orbital fit considering only the Gaia
/// observations. Each entry has a corresponding record in the table
/// sso_observation. A flag is given, indicating if the observation has been
/// rejected by the fit procedure.
#[allow(non_camel_case_types)]
pub struct aux_sso_orbit_residuals;

impl Table for aux_sso_orbit_residuals {
    fn string(&self) -> String {
        "aux_sso_orbit_residuals".to_string()
    }
}

/// The columns in the aux_sso_orbit_residuals table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// Source identifier
    source_id,
    /// Transit Identifier
    transit_id,
    /// Observation Identifier
    observation_id,
    /// minor planet number attributed by MPC
    number_mp,
    /// Gaiacentric epoch TCB(Gaia)
    epoch,
    /// post-orbital fit residual in RA*cos(Dec)
    residual_ra,
    /// post-orbital fit residual in Dec
    residual_dec,
    /// post-orbital fit residual AL
    residual_al,
    /// post-orbital fit residual AC
    residual_ac,
    /// observation not rejected by orbital fit
    selected,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the aux_sso_orbit_residuals table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::transit_id.to_string());
    col_strings.push(Col::observation_id.to_string());
    col_strings.push(Col::number_mp.to_string());
    col_strings.push(Col::epoch.to_string());
    col_strings.push(Col::residual_ra.to_string());
    col_strings.push(Col::residual_dec.to_string());
    col_strings.push(Col::residual_al.to_string());
    col_strings.push(Col::residual_ac.to_string());
    col_strings.push(Col::selected.to_string());
    map.insert(aux_sso_orbit_residuals.string(), col_strings);
}
