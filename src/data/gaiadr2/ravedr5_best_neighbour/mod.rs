// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the ravedr5_best_neighbour table.

use crate::traits::{Column, Table};

/// RAVE DR5 table lists each matched external catalogue object with its
/// best neighbour in Gaia.
#[allow(non_camel_case_types)]
pub struct ravedr5_best_neighbour;

impl Table for ravedr5_best_neighbour {
    fn string(&self) -> String {
        "ravedr5_best_neighbour".to_string()
    }
}

/// The columns in the ravedr5_best_neighbour table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// Unique Gaia source identifier
    source_id,
    /// Original External Catalogue source identifier
    original_ext_source_id,
    /// Angular Distance between the two sources
    angular_distance,
    /// Number of Gaia astrometric params used
    gaia_astrometric_params,
    /// External Catalogue source identifier
    ravedr5_oid,
    /// Number of neighbours in Gaia Catalogue
    number_of_neighbours,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the ravedr5_best_neighbour table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::original_ext_source_id.to_string());
    col_strings.push(Col::angular_distance.to_string());
    col_strings.push(Col::gaia_astrometric_params.to_string());
    col_strings.push(Col::ravedr5_oid.to_string());
    col_strings.push(Col::number_of_neighbours.to_string());
    map.insert(ravedr5_best_neighbour.string(), col_strings);
}
