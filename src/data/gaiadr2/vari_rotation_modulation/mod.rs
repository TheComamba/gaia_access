// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the vari_rotation_modulation table.

use crate::traits::{Column, Table};

/// This table describes the solar-like stars with rotational modulation.
#[allow(non_camel_case_types)]
pub struct vari_rotation_modulation;

impl Table for vari_rotation_modulation {
    fn string(&self) -> String {
        "vari_rotation_modulation".to_string()
    }
}

/// The columns in the vari_rotation_modulation table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// Solution Identifier
    solution_id,
    /// Unique source identifier
    source_id,
    /// Number of segments
    num_segments,
    /// Times at which segments start
    segments_start_time,
    /// Times at which segments end
    segments_end_time,
    /// Colour-Magnitude Intercept in segments
    segments_colour_mag_intercept,
    /// Colour-Magnitude Intercept uncertainty in segments
    segments_colour_mag_intercept_error,
    /// Colour-Magnitude Slope in segments
    segments_colour_mag_slope,
    /// Colour-Magnitude Slope uncertainty in segments
    segments_colour_mag_slope_error,
    /// Correlation coefficient in segments
    segments_correlation_coefficient,
    /// Correlation coefficient significance in segments
    segments_correlation_significance,
    /// Number of outliers
    num_outliers,
    /// Times at which outliers occurs
    outliers_time,
    /// Rotation period in segment
    segments_rotation_period,
    /// Rotation period uncertainty in segment
    segments_rotation_period_error,
    /// FAP on rotation period in segment
    segments_rotation_period_fap,
    /// Coefficient of cosine term of linear fit in segment
    segments_cos_term,
    /// Errors on cosin terms
    segments_cos_term_error,
    /// Coefficient of sin term of linear fit in segment
    segments_sin_term,
    /// Errors on sine terms
    segments_sin_term_error,
    /// Constant term (A0) of linear fit in segment
    segments_a0_term,
    /// Errors on constant terms
    segments_a0_term_error,
    /// Best rotation period
    best_rotation_period,
    /// Error on best rotation period
    best_rotation_period_error,
    /// Activity Index in segment
    segments_activity_index,
    /// error on Activity index in segment
    segments_activity_index_error,
    /// The maximum Activity Index
    max_activity_index,
    /// Error on maximum activity index
    max_activity_index_error,
    /// The unspotted G mags in segment
    segments_g_unspotted,
    /// The unspotted G mag uncertainties in segment
    segments_g_unspotted_error,
    /// The unspotted BP mag in segment
    segments_bp_unspotted,
    /// The unspotted BP mag uncertainties in segment
    segments_bp_unspotted_error,
    /// The unspotted RP mag in segment
    segments_rp_unspotted,
    /// The unspotted RP mag uncertainties in segment
    segments_rp_unspotted_error,
    /// Unspotted G mag
    g_unspotted,
    /// Unspotted G mag uncertainty
    g_unspotted_error,
    /// Unspotted BP mag
    bp_unspotted,
    /// Unspotted BP mag uncertainty
    bp_unspotted_error,
    /// Unspotted RP mag
    rp_unspotted,
    /// Unspotted RP mag uncertainty
    rp_unspotted_error,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the vari_rotation_modulation table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::num_segments.to_string());
    col_strings.push(Col::segments_start_time.to_string());
    col_strings.push(Col::segments_end_time.to_string());
    col_strings.push(Col::segments_colour_mag_intercept.to_string());
    col_strings.push(Col::segments_colour_mag_intercept_error.to_string());
    col_strings.push(Col::segments_colour_mag_slope.to_string());
    col_strings.push(Col::segments_colour_mag_slope_error.to_string());
    col_strings.push(Col::segments_correlation_coefficient.to_string());
    col_strings.push(Col::segments_correlation_significance.to_string());
    col_strings.push(Col::num_outliers.to_string());
    col_strings.push(Col::outliers_time.to_string());
    col_strings.push(Col::segments_rotation_period.to_string());
    col_strings.push(Col::segments_rotation_period_error.to_string());
    col_strings.push(Col::segments_rotation_period_fap.to_string());
    col_strings.push(Col::segments_cos_term.to_string());
    col_strings.push(Col::segments_cos_term_error.to_string());
    col_strings.push(Col::segments_sin_term.to_string());
    col_strings.push(Col::segments_sin_term_error.to_string());
    col_strings.push(Col::segments_a0_term.to_string());
    col_strings.push(Col::segments_a0_term_error.to_string());
    col_strings.push(Col::best_rotation_period.to_string());
    col_strings.push(Col::best_rotation_period_error.to_string());
    col_strings.push(Col::segments_activity_index.to_string());
    col_strings.push(Col::segments_activity_index_error.to_string());
    col_strings.push(Col::max_activity_index.to_string());
    col_strings.push(Col::max_activity_index_error.to_string());
    col_strings.push(Col::segments_g_unspotted.to_string());
    col_strings.push(Col::segments_g_unspotted_error.to_string());
    col_strings.push(Col::segments_bp_unspotted.to_string());
    col_strings.push(Col::segments_bp_unspotted_error.to_string());
    col_strings.push(Col::segments_rp_unspotted.to_string());
    col_strings.push(Col::segments_rp_unspotted_error.to_string());
    col_strings.push(Col::g_unspotted.to_string());
    col_strings.push(Col::g_unspotted_error.to_string());
    col_strings.push(Col::bp_unspotted.to_string());
    col_strings.push(Col::bp_unspotted_error.to_string());
    col_strings.push(Col::rp_unspotted.to_string());
    col_strings.push(Col::rp_unspotted_error.to_string());
    map.insert(vari_rotation_modulation.string(), col_strings);
}
