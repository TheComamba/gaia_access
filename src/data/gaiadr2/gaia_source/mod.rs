// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the gaia_source table.

use crate::traits::{Column, Table};

/// This table has an entry for every Gaia observed source as listed in the
/// Main Database accumulating catalogue version from which the catalogue
/// release has been generated. It contains the basic source parameters,
/// that is only final data (no epoch data) and no spectra (neither final
/// nor epoch).
#[allow(non_camel_case_types)]
pub struct gaia_source;

impl Table for gaia_source {
    fn string(&self) -> String {
        "gaia_source".to_string()
    }
}

/// The columns in the gaia_source table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// Solution Identifier
    solution_id,
    /// Unique source designation (unique across all Data Releases)
    designation,
    /// Unique source identifier (unique within a particular Data Release)
    source_id,
    /// Random index used to select subsets
    random_index,
    /// Reference epoch
    ref_epoch,
    /// Right ascension
    ra,
    /// Standard error of right ascension
    ra_error,
    /// Declination
    dec,
    /// Standard error of declination
    dec_error,
    /// Parallax
    parallax,
    /// Standard error of parallax
    parallax_error,
    /// Parallax divided by its error
    parallax_over_error,
    /// Proper motion in right ascension direction
    pmra,
    /// Standard error of proper motion in right ascension direction
    pmra_error,
    /// Proper motion in declination direction
    pmdec,
    /// Standard error of proper motion in declination direction
    pmdec_error,
    /// Correlation between right ascension and declination
    ra_dec_corr,
    /// Correlation between right ascension and parallax
    ra_parallax_corr,
    /// Correlation between right ascension and proper motion in right ascension
    ra_pmra_corr,
    /// Correlation between right ascension and proper motion in declination
    ra_pmdec_corr,
    /// Correlation between declination and parallax
    dec_parallax_corr,
    /// Correlation between declination and proper motion in right ascension
    dec_pmra_corr,
    /// Correlation between declination and proper motion in declination
    dec_pmdec_corr,
    /// Correlation between parallax and proper motion in right ascension
    parallax_pmra_corr,
    /// Correlation between parallax and proper motion in declination
    parallax_pmdec_corr,
    /// Correlation between proper motion in right ascension and proper motion in declination
    pmra_pmdec_corr,
    /// Total number of observations AL
    astrometric_n_obs_al,
    /// Total number of observations AC
    astrometric_n_obs_ac,
    /// Number of good observations AL
    astrometric_n_good_obs_al,
    /// Number of bad observations AL
    astrometric_n_bad_obs_al,
    /// Goodness of fit statistic of model wrt along-scan observations
    astrometric_gof_al,
    /// AL chi-square value
    astrometric_chi2_al,
    /// Excess noise of the source
    astrometric_excess_noise,
    /// Significance of excess noise
    astrometric_excess_noise_sig,
    /// Which parameters have been solved for?
    astrometric_params_solved,
    /// Primary or seconday
    astrometric_primary_flag,
    /// Mean astrometric weight of the source
    astrometric_weight_al,
    /// Astrometrically determined pseudocolour of the source
    astrometric_pseudo_colour,
    /// Standard error of the pseudocolour of the source
    astrometric_pseudo_colour_error,
    /// Mean Parallax factor AL
    mean_varpi_factor_al,
    /// Matched FOV transits used in the AGIS solution
    astrometric_matched_observations,
    /// Number of visibility periods used in Astrometric solution
    visibility_periods_used,
    /// The longest semi-major axis of the 5-d error ellipsoid
    astrometric_sigma5d_max,
    /// The type of the source mainly used for frame rotation
    frame_rotator_object_type,
    /// Amount of observations matched to this source
    matched_observations,
    /// Source with duplicate sources
    duplicated_source,
    /// Number of observations contributing to G photometry
    phot_g_n_obs,
    /// G-band mean flux
    phot_g_mean_flux,
    /// Error on G-band mean flux
    phot_g_mean_flux_error,
    /// G-band mean flux divided by its error
    phot_g_mean_flux_over_error,
    /// G-band mean magnitude
    phot_g_mean_mag,
    /// Number of observations contributing to BP photometry
    phot_bp_n_obs,
    /// Integrated BP mean flux
    phot_bp_mean_flux,
    /// Error on the integrated BP mean flux
    phot_bp_mean_flux_error,
    /// Integrated BP mean flux divided by its error
    phot_bp_mean_flux_over_error,
    /// Integrated BP mean magnitude
    phot_bp_mean_mag,
    /// Number of observations contributing to RP photometry
    phot_rp_n_obs,
    /// Integrated RP mean flux
    phot_rp_mean_flux,
    /// Error on the integrated RP mean flux
    phot_rp_mean_flux_error,
    /// Integrated RP mean flux divided by its error
    phot_rp_mean_flux_over_error,
    /// Integrated RP mean magnitude
    phot_rp_mean_mag,
    /// BP/RP excess factor
    phot_bp_rp_excess_factor,
    /// Photometry processing mode
    phot_proc_mode,
    /// BP - RP colour
    bp_rp,
    /// BP - G colour
    bp_g,
    /// G - RP colour
    g_rp,
    /// Radial velocity
    radial_velocity,
    /// Radial velocity error
    radial_velocity_error,
    /// Number of transits used to compute radial velocity
    rv_nb_transits,
    /// Teff of the template used to compute radial velocity
    rv_template_teff,
    /// logg of the template used to compute radial velocity
    rv_template_logg,
    /// Fe/H of the template used to compute radial velocity
    rv_template_fe_h,
    /// Photometric variability flag
    phot_variable_flag,
    /// Galactic longitude
    l,
    /// Galactic latitude
    b,
    /// Ecliptic longitude
    ecl_lon,
    /// Ecliptic latitude
    ecl_lat,
    /// flags for the Apsis-Priam results
    priam_flags,
    /// stellar effective temperature
    teff_val,
    /// teffVal lower uncertainty
    teff_percentile_lower,
    /// teffVal upper uncertainty
    teff_percentile_upper,
    /// line-of-sight extinction in the G band, A_G)
    a_g_val,
    /// aGVal lower uncertainty
    a_g_percentile_lower,
    /// aGVal upper uncertainty
    a_g_percentile_upper,
    /// line-of-sight reddening E(BP-RP)
    e_bp_min_rp_val,
    /// eBPminRPVal lower uncertainty
    e_bp_min_rp_percentile_lower,
    /// eBPminRPVal upper uncertainty
    e_bp_min_rp_percentile_upper,
    /// Flags for the Apsis-FLAME results
    flame_flags,
    /// stellar radius
    radius_val,
    /// radiusVal lower uncertainty
    radius_percentile_lower,
    /// radiusVal upper uncertainty
    radius_percentile_upper,
    /// stellar luminosity
    lum_val,
    /// lumVal lower uncertainty
    lum_percentile_lower,
    /// lumVal upper uncertainty
    lum_percentile_upper,
    /// datalink url
    datalink_url,
    /// The epoch_photometry_url column. (No further description available)
    epoch_photometry_url,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the gaia_source table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::designation.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::random_index.to_string());
    col_strings.push(Col::ref_epoch.to_string());
    col_strings.push(Col::ra.to_string());
    col_strings.push(Col::ra_error.to_string());
    col_strings.push(Col::dec.to_string());
    col_strings.push(Col::dec_error.to_string());
    col_strings.push(Col::parallax.to_string());
    col_strings.push(Col::parallax_error.to_string());
    col_strings.push(Col::parallax_over_error.to_string());
    col_strings.push(Col::pmra.to_string());
    col_strings.push(Col::pmra_error.to_string());
    col_strings.push(Col::pmdec.to_string());
    col_strings.push(Col::pmdec_error.to_string());
    col_strings.push(Col::ra_dec_corr.to_string());
    col_strings.push(Col::ra_parallax_corr.to_string());
    col_strings.push(Col::ra_pmra_corr.to_string());
    col_strings.push(Col::ra_pmdec_corr.to_string());
    col_strings.push(Col::dec_parallax_corr.to_string());
    col_strings.push(Col::dec_pmra_corr.to_string());
    col_strings.push(Col::dec_pmdec_corr.to_string());
    col_strings.push(Col::parallax_pmra_corr.to_string());
    col_strings.push(Col::parallax_pmdec_corr.to_string());
    col_strings.push(Col::pmra_pmdec_corr.to_string());
    col_strings.push(Col::astrometric_n_obs_al.to_string());
    col_strings.push(Col::astrometric_n_obs_ac.to_string());
    col_strings.push(Col::astrometric_n_good_obs_al.to_string());
    col_strings.push(Col::astrometric_n_bad_obs_al.to_string());
    col_strings.push(Col::astrometric_gof_al.to_string());
    col_strings.push(Col::astrometric_chi2_al.to_string());
    col_strings.push(Col::astrometric_excess_noise.to_string());
    col_strings.push(Col::astrometric_excess_noise_sig.to_string());
    col_strings.push(Col::astrometric_params_solved.to_string());
    col_strings.push(Col::astrometric_primary_flag.to_string());
    col_strings.push(Col::astrometric_weight_al.to_string());
    col_strings.push(Col::astrometric_pseudo_colour.to_string());
    col_strings.push(Col::astrometric_pseudo_colour_error.to_string());
    col_strings.push(Col::mean_varpi_factor_al.to_string());
    col_strings.push(Col::astrometric_matched_observations.to_string());
    col_strings.push(Col::visibility_periods_used.to_string());
    col_strings.push(Col::astrometric_sigma5d_max.to_string());
    col_strings.push(Col::frame_rotator_object_type.to_string());
    col_strings.push(Col::matched_observations.to_string());
    col_strings.push(Col::duplicated_source.to_string());
    col_strings.push(Col::phot_g_n_obs.to_string());
    col_strings.push(Col::phot_g_mean_flux.to_string());
    col_strings.push(Col::phot_g_mean_flux_error.to_string());
    col_strings.push(Col::phot_g_mean_flux_over_error.to_string());
    col_strings.push(Col::phot_g_mean_mag.to_string());
    col_strings.push(Col::phot_bp_n_obs.to_string());
    col_strings.push(Col::phot_bp_mean_flux.to_string());
    col_strings.push(Col::phot_bp_mean_flux_error.to_string());
    col_strings.push(Col::phot_bp_mean_flux_over_error.to_string());
    col_strings.push(Col::phot_bp_mean_mag.to_string());
    col_strings.push(Col::phot_rp_n_obs.to_string());
    col_strings.push(Col::phot_rp_mean_flux.to_string());
    col_strings.push(Col::phot_rp_mean_flux_error.to_string());
    col_strings.push(Col::phot_rp_mean_flux_over_error.to_string());
    col_strings.push(Col::phot_rp_mean_mag.to_string());
    col_strings.push(Col::phot_bp_rp_excess_factor.to_string());
    col_strings.push(Col::phot_proc_mode.to_string());
    col_strings.push(Col::bp_rp.to_string());
    col_strings.push(Col::bp_g.to_string());
    col_strings.push(Col::g_rp.to_string());
    col_strings.push(Col::radial_velocity.to_string());
    col_strings.push(Col::radial_velocity_error.to_string());
    col_strings.push(Col::rv_nb_transits.to_string());
    col_strings.push(Col::rv_template_teff.to_string());
    col_strings.push(Col::rv_template_logg.to_string());
    col_strings.push(Col::rv_template_fe_h.to_string());
    col_strings.push(Col::phot_variable_flag.to_string());
    col_strings.push(Col::l.to_string());
    col_strings.push(Col::b.to_string());
    col_strings.push(Col::ecl_lon.to_string());
    col_strings.push(Col::ecl_lat.to_string());
    col_strings.push(Col::priam_flags.to_string());
    col_strings.push(Col::teff_val.to_string());
    col_strings.push(Col::teff_percentile_lower.to_string());
    col_strings.push(Col::teff_percentile_upper.to_string());
    col_strings.push(Col::a_g_val.to_string());
    col_strings.push(Col::a_g_percentile_lower.to_string());
    col_strings.push(Col::a_g_percentile_upper.to_string());
    col_strings.push(Col::e_bp_min_rp_val.to_string());
    col_strings.push(Col::e_bp_min_rp_percentile_lower.to_string());
    col_strings.push(Col::e_bp_min_rp_percentile_upper.to_string());
    col_strings.push(Col::flame_flags.to_string());
    col_strings.push(Col::radius_val.to_string());
    col_strings.push(Col::radius_percentile_lower.to_string());
    col_strings.push(Col::radius_percentile_upper.to_string());
    col_strings.push(Col::lum_val.to_string());
    col_strings.push(Col::lum_percentile_lower.to_string());
    col_strings.push(Col::lum_percentile_upper.to_string());
    col_strings.push(Col::datalink_url.to_string());
    col_strings.push(Col::epoch_photometry_url.to_string());
    map.insert(gaia_source.string(), col_strings);
}
