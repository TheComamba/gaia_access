// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known tables in the gaiadr2 schema.

use crate::traits::Schema;

/// Gaia Data Release 2
#[allow(non_camel_case_types)]
pub struct gaiadr2;

impl Schema for gaiadr2 {
    fn string(&self) -> String {
        "gaiadr2".to_string()
    }
}

#[cfg(any(feature = "gaiadr2_allwise_best_neighbour", test))]
pub mod allwise_best_neighbour;
#[cfg(any(feature = "gaiadr2_allwise_neighbourhood", test))]
pub mod allwise_neighbourhood;
#[cfg(any(feature = "gaiadr2_apassdr9_best_neighbour", test))]
pub mod apassdr9_best_neighbour;
#[cfg(any(feature = "gaiadr2_apassdr9_neighbourhood", test))]
pub mod apassdr9_neighbourhood;
#[cfg(any(feature = "gaiadr2_aux_allwise_agn_gdr2_cross_id", test))]
pub mod aux_allwise_agn_gdr2_cross_id;
#[cfg(any(feature = "gaiadr2_aux_iers_gdr2_cross_id", test))]
pub mod aux_iers_gdr2_cross_id;
#[cfg(any(feature = "gaiadr2_aux_sso_orbit_residuals", test))]
pub mod aux_sso_orbit_residuals;
#[cfg(any(feature = "gaiadr2_aux_sso_orbits", test))]
pub mod aux_sso_orbits;
#[cfg(any(feature = "gaiadr2_dr1_neighbourhood", test))]
pub mod dr1_neighbourhood;
#[cfg(any(feature = "gaiadr2_gaia_source", test))]
pub mod gaia_source;
#[cfg(any(feature = "gaiadr2_gsc23_best_neighbour", test))]
pub mod gsc23_best_neighbour;
#[cfg(any(feature = "gaiadr2_gsc23_neighbourhood", test))]
pub mod gsc23_neighbourhood;
#[cfg(any(feature = "gaiadr2_hipparcos2_best_neighbour", test))]
pub mod hipparcos2_best_neighbour;
#[cfg(any(feature = "gaiadr2_hipparcos2_neighbourhood", test))]
pub mod hipparcos2_neighbourhood;
#[cfg(any(feature = "gaiadr2_panstarrs1_best_neighbour", test))]
pub mod panstarrs1_best_neighbour;
#[cfg(any(feature = "gaiadr2_panstarrs1_neighbourhood", test))]
pub mod panstarrs1_neighbourhood;
#[cfg(any(feature = "gaiadr2_panstarrs1_original_valid", test))]
pub mod panstarrs1_original_valid;
#[cfg(any(feature = "gaiadr2_ppmxl_best_neighbour", test))]
pub mod ppmxl_best_neighbour;
#[cfg(any(feature = "gaiadr2_ppmxl_neighbourhood", test))]
pub mod ppmxl_neighbourhood;
#[cfg(any(feature = "gaiadr2_ravedr5_best_neighbour", test))]
pub mod ravedr5_best_neighbour;
#[cfg(any(feature = "gaiadr2_ravedr5_neighbourhood", test))]
pub mod ravedr5_neighbourhood;
#[cfg(any(feature = "gaiadr2_ruwe", test))]
pub mod ruwe;
#[cfg(any(feature = "gaiadr2_sdssdr9_best_neighbour", test))]
pub mod sdssdr9_best_neighbour;
#[cfg(any(feature = "gaiadr2_sdssdr9_neighbourhood", test))]
pub mod sdssdr9_neighbourhood;
#[cfg(any(feature = "gaiadr2_sso_observation", test))]
pub mod sso_observation;
#[cfg(any(feature = "gaiadr2_sso_source", test))]
pub mod sso_source;
#[cfg(any(feature = "gaiadr2_tmass_best_neighbour", test))]
pub mod tmass_best_neighbour;
#[cfg(any(feature = "gaiadr2_tmass_neighbourhood", test))]
pub mod tmass_neighbourhood;
#[cfg(any(feature = "gaiadr2_tycho2_best_neighbour", test))]
pub mod tycho2_best_neighbour;
#[cfg(any(feature = "gaiadr2_tycho2_neighbourhood", test))]
pub mod tycho2_neighbourhood;
#[cfg(any(feature = "gaiadr2_urat1_best_neighbour", test))]
pub mod urat1_best_neighbour;
#[cfg(any(feature = "gaiadr2_urat1_neighbourhood", test))]
pub mod urat1_neighbourhood;
#[cfg(any(feature = "gaiadr2_vari_cepheid", test))]
pub mod vari_cepheid;
#[cfg(any(feature = "gaiadr2_vari_classifier_class_definition", test))]
pub mod vari_classifier_class_definition;
#[cfg(any(feature = "gaiadr2_vari_classifier_definition", test))]
pub mod vari_classifier_definition;
#[cfg(any(feature = "gaiadr2_vari_classifier_result", test))]
pub mod vari_classifier_result;
#[cfg(any(feature = "gaiadr2_vari_long_period_variable", test))]
pub mod vari_long_period_variable;
#[cfg(any(feature = "gaiadr2_vari_rotation_modulation", test))]
pub mod vari_rotation_modulation;
#[cfg(any(feature = "gaiadr2_vari_rrlyrae", test))]
pub mod vari_rrlyrae;
#[cfg(any(feature = "gaiadr2_vari_short_timescale", test))]
pub mod vari_short_timescale;
#[cfg(any(feature = "gaiadr2_vari_time_series_statistics", test))]
pub mod vari_time_series_statistics;

#[cfg(test)]
/// Collects all the known tables in the gaiadr2 schema.
pub(crate) fn collect_known(
    map: &mut std::collections::HashMap<String, std::collections::HashMap<String, Vec<String>>>,
) {
    // Some tables do not have any columns. Disabling compiler warnings for these cases
    #[allow(unused_mut)]
    let mut tables = std::collections::HashMap::new();
    aux_allwise_agn_gdr2_cross_id::collect_known(&mut tables);
    aux_iers_gdr2_cross_id::collect_known(&mut tables);
    aux_sso_orbit_residuals::collect_known(&mut tables);
    aux_sso_orbits::collect_known(&mut tables);
    dr1_neighbourhood::collect_known(&mut tables);
    allwise_best_neighbour::collect_known(&mut tables);
    allwise_neighbourhood::collect_known(&mut tables);
    apassdr9_best_neighbour::collect_known(&mut tables);
    apassdr9_neighbourhood::collect_known(&mut tables);
    gsc23_best_neighbour::collect_known(&mut tables);
    gsc23_neighbourhood::collect_known(&mut tables);
    hipparcos2_best_neighbour::collect_known(&mut tables);
    hipparcos2_neighbourhood::collect_known(&mut tables);
    panstarrs1_best_neighbour::collect_known(&mut tables);
    panstarrs1_neighbourhood::collect_known(&mut tables);
    ppmxl_best_neighbour::collect_known(&mut tables);
    ppmxl_neighbourhood::collect_known(&mut tables);
    ravedr5_best_neighbour::collect_known(&mut tables);
    ravedr5_neighbourhood::collect_known(&mut tables);
    sdssdr9_best_neighbour::collect_known(&mut tables);
    sdssdr9_neighbourhood::collect_known(&mut tables);
    tmass_best_neighbour::collect_known(&mut tables);
    tmass_neighbourhood::collect_known(&mut tables);
    tycho2_best_neighbour::collect_known(&mut tables);
    tycho2_neighbourhood::collect_known(&mut tables);
    urat1_best_neighbour::collect_known(&mut tables);
    urat1_neighbourhood::collect_known(&mut tables);
    sso_observation::collect_known(&mut tables);
    sso_source::collect_known(&mut tables);
    vari_cepheid::collect_known(&mut tables);
    vari_classifier_class_definition::collect_known(&mut tables);
    vari_classifier_definition::collect_known(&mut tables);
    vari_classifier_result::collect_known(&mut tables);
    vari_long_period_variable::collect_known(&mut tables);
    vari_rotation_modulation::collect_known(&mut tables);
    vari_rrlyrae::collect_known(&mut tables);
    vari_short_timescale::collect_known(&mut tables);
    vari_time_series_statistics::collect_known(&mut tables);
    panstarrs1_original_valid::collect_known(&mut tables);
    gaia_source::collect_known(&mut tables);
    ruwe::collect_known(&mut tables);
    map.insert(gaiadr2.string(), tables);
}
