// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the ravedr5_gra table.

use crate::traits::{Column, Table};

/// The Radial Velocity Experiment (RAVE): fifth data release (DR5). Astroseismic gravities (RAVE_Gravity_SC.dat). RAVE DR5 is the fifth data release from a magnitude-limited (9 < I < 12 mag) survey of stars randomly selected in the Southern Hemisphere. The RAVE medium-resolution spectra (R ~ 7500) covering the Ca-triplet region (8410-8795 Angstrom) span the complete time frame from the start of RAVE observations in 2003 to their completion in 2013. Radial velocities from 520,781 spectra of 457,588 unique stars are presented, of which 255,922 stellar observations have parallaxes and proper motions from the Tycho-Gaia astrometric solution in Gaia DR1. For the main DR5 catalogue, stellar parameters (effective temperature, surface gravity, and overall metallicity) are computed using the RAVE DR4 stellar pipeline, but calibrated using recent K2 Campaign 1 seismic gravities and Gaia benchmark stars, as well as results obtained from high-resolution studies. Also included are temperatures from the Infrared Flux Method, and a catalogue of red giant stars in the de-reddened color {(J-{Ks})}_0 interval (0.50, 0.85) for which the gravities were calibrated based only on seismology. Further data products for subsamples of the RAVE stars include individual abundances for Mg, Al, Si, Ca, Ti, Fe, and Ni, and distances found using isochrones. Each RAVE spectrum is complemented by an error spectrum, which has been used to determine uncertainties on the parameters. Data retrieved using the VizieR catalogue access tool, CDS, Strasbourg, France (VizieR catalogue: III/279). Reference paper: https://ui.adsabs.harvard.edu/abs/2017AJ....153...75K/abstract (DOI: 10.3847/1538-3881/153/2/75)
#[allow(non_camel_case_types)]
pub struct ravedr5_gra;

impl Table for ravedr5_gra {
    fn string(&self) -> String {
        "ravedr5_gra".to_string()
    }
}

/// The columns in the ravedr5_gra table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// ! Target designation (RAVE_OBS_ID)
    name,
    /// ? Log gravity calibrated astroseismically (logg_SC)
    loggsc,
    /// ? Error on loggSC (elogg_SC)
    e_loggsc,
    /// [0/1] Difference between loggSC and loggK less than 0.5dex (1=true, 0=false) (Flag050)
    flag050,
    /// [0/1]? Difference between loggSC and loggK less than 0.75dex (1=true, 0=false) (Flag075)
    flag075,
    /// [0/1]? Normal star, meaning c1-c20 are all "n" (1=true, 0=false) (Flag_M)
    flagm,
    /// ? Temperature from infrared flux (Teff_IR)
    teffir,
    /// ? Abundance of Mg (Mg) (2)
    mg_h,
    /// ? Number of used spectral lines for calculation (Mg_N)
    o_mg_h,
    /// ? Abundance of Al (Al) (2)
    al_h,
    /// ? Number of used spectral lines for calculation (Al_N)
    o_al_h,
    /// ? Abundance of Si (Si) (2)
    si_h,
    /// ? Number of used spectral lines for calculation (Si_N)
    o_si_h,
    /// ? Abundance of Ti (Ti) (2)
    ti_h,
    /// ? Number of used spectral lines for calculation (Ti_N)
    o_ti_h,
    /// ? Abundance of Fe (Fe) (2)
    fe_h,
    /// ? Number of used spectral lines for calculation (Fe_N)
    o_fe_h,
    /// ? Abundance of Ni (Ni) (2)
    ni_h,
    /// ? Number of used spectral lines for calculation (Ni_N)
    o_ni_h,
    /// ? Alpha-enhancement from chemical pipeline (Alpha_c)
    a_fe_c,
    /// ? Chi-square of chemical pipeline (CHISQ_c) (2)
    chisqc,
    /// ? Fraction of spectrum used for calculation of abundances (frac_c)
    fracc,
    /// ? Total extinction in V-band from Schlegel et al. (1998ApJ...500..525S) (AV_Schlegel)
    avschl,
    /// ? Spectrophotometric distance (distance) (1)
    dist,
    /// ? Error on distance (edistance) (1)
    e_dist,
    /// ? Log Av extinction (log_Av) (1)
    logav,
    /// ? Error on LogAv (elog_Av) (1)
    e_logav,
    /// ? Spectrophotometric parallax (parallax) (1)
    plx,
    /// ? Error on plx (eparallax) (1)
    e_plx,
    /// ? Distance modulus (DistanceModulus_Binney) (1)
    dm,
    /// ? Error on DM (eDistanceModulus_Binney) (1)
    e_dm,
    /// ? Fit flag see sec.3 of Binney et al. (2014MNRAS.437..351B) (Fit_Flag_Binney)
    ffb,
    /// ? Fit quality "F" given by Eq. 15 of Binney et al. (2014MNRAS.437..351B) (FitQuality_Binney)
    fqb,
    /// ? Number of components required for multi-Gaussian distance modulus fit (N_Gauss_fit)
    ngauss,
    /// ? Mean of 1st Gaussian (Gauss_mean_1)
    gm1,
    /// ? Sigma of 1st Gaussian (Gauss_sigma_1)
    gs1,
    /// ? Normalisation of 1st Gaussian (Gauss_frac_1)
    gf1,
    /// ? Mean of 2nd Gaussian (Gauss_mean_2)
    gm2,
    /// ? Sigma of 2nd Gaussian (Gauss_sigma_2)
    gs2,
    /// ? Normalisation of 2nd Gaussian (Gauss_frac_2)
    gf2,
    /// ? Mean of 3rd Gaussian (Gauss_mean_3)
    gm3,
    /// ? Sigma of 3rd Gaussian (Gauss_sigma_3)
    gs3,
    /// ? Normalisation of 3rd Gaussian (Gauss_frac_3)
    gf3,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the ravedr5_gra table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::name.to_string());
    col_strings.push(Col::loggsc.to_string());
    col_strings.push(Col::e_loggsc.to_string());
    col_strings.push(Col::flag050.to_string());
    col_strings.push(Col::flag075.to_string());
    col_strings.push(Col::flagm.to_string());
    col_strings.push(Col::teffir.to_string());
    col_strings.push(Col::mg_h.to_string());
    col_strings.push(Col::o_mg_h.to_string());
    col_strings.push(Col::al_h.to_string());
    col_strings.push(Col::o_al_h.to_string());
    col_strings.push(Col::si_h.to_string());
    col_strings.push(Col::o_si_h.to_string());
    col_strings.push(Col::ti_h.to_string());
    col_strings.push(Col::o_ti_h.to_string());
    col_strings.push(Col::fe_h.to_string());
    col_strings.push(Col::o_fe_h.to_string());
    col_strings.push(Col::ni_h.to_string());
    col_strings.push(Col::o_ni_h.to_string());
    col_strings.push(Col::a_fe_c.to_string());
    col_strings.push(Col::chisqc.to_string());
    col_strings.push(Col::fracc.to_string());
    col_strings.push(Col::avschl.to_string());
    col_strings.push(Col::dist.to_string());
    col_strings.push(Col::e_dist.to_string());
    col_strings.push(Col::logav.to_string());
    col_strings.push(Col::e_logav.to_string());
    col_strings.push(Col::plx.to_string());
    col_strings.push(Col::e_plx.to_string());
    col_strings.push(Col::dm.to_string());
    col_strings.push(Col::e_dm.to_string());
    col_strings.push(Col::ffb.to_string());
    col_strings.push(Col::fqb.to_string());
    col_strings.push(Col::ngauss.to_string());
    col_strings.push(Col::gm1.to_string());
    col_strings.push(Col::gs1.to_string());
    col_strings.push(Col::gf1.to_string());
    col_strings.push(Col::gm2.to_string());
    col_strings.push(Col::gs2.to_string());
    col_strings.push(Col::gf2.to_string());
    col_strings.push(Col::gm3.to_string());
    col_strings.push(Col::gs3.to_string());
    col_strings.push(Col::gf3.to_string());
    map.insert(ravedr5_gra.string(), col_strings);
}
