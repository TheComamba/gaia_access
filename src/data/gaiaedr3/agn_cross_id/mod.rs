// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the agn_cross_id table.

use crate::traits::{Column, Table};

/// <p>Table <tt>AgnCrossId</tt> lists sources whose positions and proper motions define the celestial reference frame of Gaia catalogue.</p>
/// <p>
/// <tt>AgnCrossId</tt> lists the sources in Gaia (E)DR3 cross-matched to sources in a number of external AGN catalogues. The first column is the sources identifier in the external catalogue specified in the third column, the second column is the source identifier in Gaia (E)DR3.</p>
/// <p>The selection of sources and the quality of the Gaia-CRF3 are discussed in</p>
/// <p>EDR3-DPACP-133.</p>
#[allow(non_camel_case_types)]
pub struct agn_cross_id;

impl Table for agn_cross_id {
    fn string(&self) -> String {
        "agn_cross_id".to_string()
    }
}

/// The columns in the agn_cross_id table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// Identifier in the external catalogue
    source_name_in_catalogue,
    /// Gaia source identifier
    source_id,
    /// Name of the external catalogue
    catalogue_name,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the agn_cross_id table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::source_name_in_catalogue.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::catalogue_name.to_string());
    map.insert(agn_cross_id.string(), col_strings);
}
