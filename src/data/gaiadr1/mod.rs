// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known tables in the gaiadr1 schema.

use crate::traits::Schema;

/// Gaia Data Release 1
#[allow(non_camel_case_types)]
pub struct gaiadr1;

impl Schema for gaiadr1 {
    fn string(&self) -> String {
        "gaiadr1".to_string()
    }
}

#[cfg(any(feature = "gaiadr1_allwise_best_neighbour", test))]
pub mod allwise_best_neighbour;
#[cfg(any(feature = "gaiadr1_allwise_neighbourhood", test))]
pub mod allwise_neighbourhood;
#[cfg(any(feature = "gaiadr1_allwise_original_valid", test))]
pub mod allwise_original_valid;
#[cfg(any(feature = "gaiadr1_aux_qso_icrf2_match", test))]
pub mod aux_qso_icrf2_match;
#[cfg(any(feature = "gaiadr1_cepheid", test))]
pub mod cepheid;
#[cfg(any(feature = "gaiadr1_ext_phot_zero_point", test))]
pub mod ext_phot_zero_point;
#[cfg(any(feature = "gaiadr1_gaia_source", test))]
pub mod gaia_source;
#[cfg(any(feature = "gaiadr1_gsc23_best_neighbour", test))]
pub mod gsc23_best_neighbour;
#[cfg(any(feature = "gaiadr1_gsc23_neighbourhood", test))]
pub mod gsc23_neighbourhood;
#[cfg(any(feature = "gaiadr1_gsc23_original_valid", test))]
pub mod gsc23_original_valid;
#[cfg(any(feature = "gaiadr1_phot_variable_time_series_gfov", test))]
pub mod phot_variable_time_series_gfov;
#[cfg(any(
    feature = "gaiadr1_phot_variable_time_series_gfov_statistical_parameters",
    test
))]
pub mod phot_variable_time_series_gfov_statistical_parameters;
#[cfg(any(feature = "gaiadr1_ppmxl_best_neighbour", test))]
pub mod ppmxl_best_neighbour;
#[cfg(any(feature = "gaiadr1_ppmxl_neighbourhood", test))]
pub mod ppmxl_neighbourhood;
#[cfg(any(feature = "gaiadr1_ppmxl_original_valid", test))]
pub mod ppmxl_original_valid;
#[cfg(any(feature = "gaiadr1_rrlyrae", test))]
pub mod rrlyrae;
#[cfg(any(feature = "gaiadr1_sdss_dr9_best_neighbour", test))]
pub mod sdss_dr9_best_neighbour;
#[cfg(any(feature = "gaiadr1_sdss_dr9_neighbourhood", test))]
pub mod sdss_dr9_neighbourhood;
#[cfg(any(feature = "gaiadr1_sdssdr9_original_valid", test))]
pub mod sdssdr9_original_valid;
#[cfg(any(feature = "gaiadr1_tgas_source", test))]
pub mod tgas_source;
#[cfg(any(feature = "gaiadr1_tmass_best_neighbour", test))]
pub mod tmass_best_neighbour;
#[cfg(any(feature = "gaiadr1_tmass_neighbourhood", test))]
pub mod tmass_neighbourhood;
#[cfg(any(feature = "gaiadr1_tmass_original_valid", test))]
pub mod tmass_original_valid;
#[cfg(any(feature = "gaiadr1_ucac4_best_neighbour", test))]
pub mod ucac4_best_neighbour;
#[cfg(any(feature = "gaiadr1_ucac4_neighbourhood", test))]
pub mod ucac4_neighbourhood;
#[cfg(any(feature = "gaiadr1_ucac4_original_valid", test))]
pub mod ucac4_original_valid;
#[cfg(any(feature = "gaiadr1_urat1_best_neighbour", test))]
pub mod urat1_best_neighbour;
#[cfg(any(feature = "gaiadr1_urat1_neighbourhood", test))]
pub mod urat1_neighbourhood;
#[cfg(any(feature = "gaiadr1_urat1_original_valid", test))]
pub mod urat1_original_valid;
#[cfg(any(feature = "gaiadr1_variable_summary", test))]
pub mod variable_summary;

#[cfg(test)]
/// Collects all the known tables in the gaiadr1 schema.
pub(crate) fn collect_known(
    map: &mut std::collections::HashMap<String, std::collections::HashMap<String, Vec<String>>>,
) {
    // Some tables do not have any columns. Disabling compiler warnings for these cases
    #[allow(unused_mut)]
    let mut tables = std::collections::HashMap::new();
    aux_qso_icrf2_match::collect_known(&mut tables);
    ext_phot_zero_point::collect_known(&mut tables);
    allwise_best_neighbour::collect_known(&mut tables);
    allwise_neighbourhood::collect_known(&mut tables);
    gsc23_best_neighbour::collect_known(&mut tables);
    gsc23_neighbourhood::collect_known(&mut tables);
    ppmxl_best_neighbour::collect_known(&mut tables);
    ppmxl_neighbourhood::collect_known(&mut tables);
    sdss_dr9_best_neighbour::collect_known(&mut tables);
    sdss_dr9_neighbourhood::collect_known(&mut tables);
    tmass_best_neighbour::collect_known(&mut tables);
    tmass_neighbourhood::collect_known(&mut tables);
    ucac4_best_neighbour::collect_known(&mut tables);
    ucac4_neighbourhood::collect_known(&mut tables);
    urat1_best_neighbour::collect_known(&mut tables);
    urat1_neighbourhood::collect_known(&mut tables);
    cepheid::collect_known(&mut tables);
    phot_variable_time_series_gfov::collect_known(&mut tables);
    phot_variable_time_series_gfov_statistical_parameters::collect_known(&mut tables);
    rrlyrae::collect_known(&mut tables);
    variable_summary::collect_known(&mut tables);
    allwise_original_valid::collect_known(&mut tables);
    gsc23_original_valid::collect_known(&mut tables);
    ppmxl_original_valid::collect_known(&mut tables);
    sdssdr9_original_valid::collect_known(&mut tables);
    tmass_original_valid::collect_known(&mut tables);
    ucac4_original_valid::collect_known(&mut tables);
    urat1_original_valid::collect_known(&mut tables);
    gaia_source::collect_known(&mut tables);
    tgas_source::collect_known(&mut tables);
    map.insert(gaiadr1.string(), tables);
}
