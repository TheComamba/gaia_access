// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the phot_variable_time_series_gfov_statistical_parameters table.

use crate::traits::{Column, Table};

/// Statistical parameters of field-of-view time series, only including
/// observations with rejectedByVariabilityProcessing=false as found in
/// table PhotVariableTimeSeriesGfov. Note that only sources are included
/// that have photVariableFlag = “VARIABLE” in the GaiaSource table.
#[allow(non_camel_case_types)]
pub struct phot_variable_time_series_gfov_statistical_parameters;

impl Table for phot_variable_time_series_gfov_statistical_parameters {
    fn string(&self) -> String {
        "phot_variable_time_series_gfov_statistical_parameters".to_string()
    }
}

/// The columns in the phot_variable_time_series_gfov_statistical_parameters table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// All Gaia data processed by the Data Processing and Analysis Consortium
    /// comes tagged with a solution identifier. This is a numeric field
    /// attached to each table row that can be used to unequivocally identify
    /// the version of all the subsystems that where used in the generation of
    /// the data as well as the input data used. It is mainly for internal DPAC
    /// use but is included in the published data releases to enable end users
    /// to examine the provenance of processed data products. To decode a given
    /// solution ID visit
    solution_id,
    /// A unique single numerical identifier of the source obtained from
    /// GaiaSource (for a detailed description see GaiaSource.sourceId)
    source_id,
    /// The number of processed observations for variability analyses of this
    /// source, only including observations with
    /// rejectedByVariabilityProcessing=false, as found in table
    /// PhotVariableTimeSeriesGfov.
    num_observations_processed,
    /// Name: The mean observation time
    ///
    /// Input: Gaia barycentric light-travel time corrected FOV observation
    /// times with respect to reference time T_0 = 2455197.5 days (=J2010.0 =
    /// 2010-01-01T00:00:00), only including observations with
    /// rejectedByVariabilityProcessing=false, as found in table
    /// PhotVariableTimeSeriesGfov.
    ///
    /// Control parameters: None
    ///
    /// Output: Let y_{i} be a time series of size N at times t_i. The mean
    /// \overline{t} is defined as
    ///
    /// \overline{t} = \frac{1}{N}\sum_{i=1}^N\ t_{i}.  {\label{eq:1}}
    mean_obs_time,
    /// Minimum magnitude of the G-band time series, only including observations
    /// with rejectedByVariabilityProcessing=false, as found in table
    /// PhotVariableTimeSeriesGfov.
    minimum,
    /// Maximum magnitude of the G-band time series, only including observations
    /// with rejectedByVariabilityProcessing=false, as found in table
    /// PhotVariableTimeSeriesGfov.
    maximum,
    /// Name: The mean magnitude of the G-band time series
    ///
    /// Input: Gaia time series, only including observations with
    /// rejectedByVariabilityProcessing=false, as found in table
    /// PhotVariableTimeSeriesGfov.
    ///
    /// Control parameters: None
    ///
    /// Output: Let y_{i} be a time series of size N. The mean \overline{y} is
    /// defined as
    ///
    /// \overline{y} = \frac{1}{N}\sum_{i=1}^N\ y_{i}.  {\label{eq:1}}
    mean,
    /// Name: Median magnitude of the G-band time series
    ///
    /// Input: Gaia time series, only including observations with
    /// rejectedByVariabilityProcessing=false, as found in table
    /// PhotVariableTimeSeriesGfov.
    ///
    /// Control parameters: None
    ///
    /// Output: The (unweighted) 50th percentile value.
    ///
    /// Let y_{i} be a time series of size N ordered such as
    /// y_{(1)} \le y_{(2)} \le \cdots \le y_{(N)}. The m-th (per cent)
    /// percentile P_m is defined for 0<m\leq 100 as follows: P_m=\left\{
    /// \begin{array}{ll}
    /// y_{(1)} &  \mbox{if }  0< m< p_1 \\
    /// y_{(i)}+\frac{m-p_i}{p_{i+1}-p_i}\,\left(y_{(i+1)}-y_{(i)}\right)& \mbox{if } p_i\leq m \leq p_{i+1}  \\
    /// y_{(N)} &  \mbox{if }  p_N < m \leq 100
    /// \end{array}
    /// \right. where p_i=100\,i/(N+1).
    median,
    /// Name: Magnitude range of the G-band time series
    ///
    /// Input: Gaia time series, only including observations with
    /// rejectedByVariabilityProcessing=false, as found in table
    /// PhotVariableTimeSeriesGfov.
    ///
    /// Control parameters: None
    ///
    /// Output: Let y_{i} be a time series, y_{\rm max} its largest element, and
    /// y_{\rm min} its smallest element, then the range is defined as
    ///
    /// R =  y_{\rm max} - y_{\rm min\label{eq:3}}
    range,
    /// Name: The square root of the unbiased unweighted variance.
    ///
    ///     Input: Gaia time series, only including observations with
    ///     rejectedByVariabilityProcessing=false, as found in table
    ///     PhotVariableTimeSeriesGfov.
    ///
    ///     Output: Let y_{i} be a time series of size N. The unweighted
    ///     standard deviation \hat{\sigma} is defined as the square root of the
    ///     sample-size unbiased unweighted variance:
    ///     \hat{\sigma}=\sqrt{\frac{1}{N-1}\sum_{i=1}^{N} (y_i-\overline{y})^2 }.
    std_dev,
    /// Name: The standardised unbiased unweighted skewness.
    ///
    ///     Input: Gaia time series, only including observations with
    ///     rejectedByVariabilityProcessing=false, as found in table
    ///     PhotVariableTimeSeriesGfov.
    ///
    ///     Output: Let y_{i} be a time series of size N. The sample-size
    ///     unbiased unweighted skewness moment \mathcal{E} is defined as:
    ///     \mathcal{E}= \frac{N}{(N-1)(N-2)}\sum_{i=1}^{N}(y_i-\overline{y})^3.
    ///     The standardized unbiased skewness E is defined as:
    ///     E= \frac{\mathcal{E}}{\hat{\sigma}^{3}} where \hat{\sigma} is the
    ///     square root of the unbiased unweighted variance around the
    ///     unweighted mean. While \mathcal{E} is an unbiased estimate of the
    ///     population value, E becomes unbiased in the limit of large N.
    skewness,
    /// Name: The standardised unbiased unweighted kurtosis.
    ///
    ///     Input: Gaia time series, only including observations with
    ///     rejectedByVariabilityProcessing=false, as found in table
    ///     PhotVariableTimeSeriesGfov.
    ///
    ///     Output: Let y_{i} be a time series of size N. The sample-size
    ///     unbiased unweighted kurtosis cumulant \mathcal{K} is defined as:
    ///     \mathcal{K} =\frac{N(N+1)}{(N-1)(N-2)(N-3)}\sum_{i=1}^{N} (y_i-\overline{y})^4 -\frac{3}{(N-2)(N-3)}\,\left[\sum_{i=1}^{N} (y_i-\overline{y})^2\right]^2.
    ///     The standardized unbiased kurtosis K is defined as:
    ///     K= \frac{\mathcal{K}}{\hat{\sigma}^{4}} where \hat{\sigma}^2 is the
    ///     unbiased unweighted variance around the unweighted mean. While
    ///     \mathcal{K} is an unbiased estimate of the population value, K
    ///     becomes unbiased in the limit of large N.
    kurtosis,
    /// Duration of Gaia time series, only including observations with
    /// rejectedByVariabilityProcessing=false, as found in table
    /// PhotVariableTimeSeriesGfov.
    time_duration,
    /// Name: The Median Absolute Deviation (MAD)
    ///
    /// Input: Gaia time series, only including observations with
    /// rejectedByVariabilityProcessing=false, as found in table
    /// PhotVariableTimeSeriesGfov.
    ///
    /// Control parameters: None
    ///
    /// Output: Let y_{i} be a time series of size N. The MAD is defined as the
    /// median of the absolute deviations from the median of the data, scaled by
    /// a factor of 1/\Phi^{-1}(3/4) \approx 1.4826 (where \Phi^{-1} is the
    /// inverse of the cumulative distribution function for the standard normal
    /// distribution), so that the expectation of the scaled MAD at large N
    /// equals the standard deviation of a normal distribution:
    ///
    /// \mbox{MAD}=1.4826 ~ \mbox{median}\{|y_i-\mbox{median}\{y_j, \forall j\in(1,N)\} |, \forall i\in(1,N) \}.
    median_absolute_deviation,
    /// Name: The Abbe value
    ///
    /// Input: Gaia time series, only including observations with
    /// rejectedByVariabilityProcessing=false, as found in table
    /// PhotVariableTimeSeriesGfov.
    ///
    /// Control parameters: None
    ///
    /// Output: Let \{t_i,y_{i}\} be a time-sorted time series of size N, such
    /// that t_i<t_{i+1} for all i<N. The Abbe value \cal{A} is defined as
    ///
    /// {\cal A}=\frac{N}{2(N-1)}\frac{\sum_{i=1}^{N-1} (y_{i+1}-y_i)^2}{\sum_{i=1}^N (y_i-\bar{y})}
    ///
    /// where \bar{y} is the unweighted mean.
    abbe,
    /// Name: The Interquartile Range (IQR)
    ///
    /// Input: Gaia time series, only including observations with
    /// rejectedByVariabilityProcessing=false, as found in table
    /// PhotVariableTimeSeriesGfov.
    ///
    /// Control parameters: None
    ///
    /// Output: The difference between the (unweighted) 75th and 25th percentile
    /// values: IQR=P_{75}-P_{25}.
    ///
    /// Let y_{i} be a time series of size N ordered such as
    /// y_{(1)} \le y_{(2)} \le \cdots \le y_{(N)}. The m-th (per cent)
    /// percentile P_m is defined for 0<m\leq 100 as follows: P_m=\left\{
    /// \begin{array}{ll}
    /// y_{(1)} &  \mbox{if }  0< m< p_1 \\
    /// y_{(i)}+\frac{m-p_i}{p_{i+1}-p_i}\,\left(y_{(i+1)}-y_{(i)}\right)& \mbox{if } p_i\leq m \leq p_{i+1}  \\
    /// y_{(N)} &  \mbox{if }  p_N < m \leq 100
    /// \end{array}
    /// \right. where p_i=100\,i/(N+1).
    iqr,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the phot_variable_time_series_gfov_statistical_parameters table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::num_observations_processed.to_string());
    col_strings.push(Col::mean_obs_time.to_string());
    col_strings.push(Col::minimum.to_string());
    col_strings.push(Col::maximum.to_string());
    col_strings.push(Col::mean.to_string());
    col_strings.push(Col::median.to_string());
    col_strings.push(Col::range.to_string());
    col_strings.push(Col::std_dev.to_string());
    col_strings.push(Col::skewness.to_string());
    col_strings.push(Col::kurtosis.to_string());
    col_strings.push(Col::time_duration.to_string());
    col_strings.push(Col::median_absolute_deviation.to_string());
    col_strings.push(Col::abbe.to_string());
    col_strings.push(Col::iqr.to_string());
    map.insert(
        phot_variable_time_series_gfov_statistical_parameters.string(),
        col_strings,
    );
}
