// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the keys table.

use crate::traits::{Column, Table};

/// TAP SCHEMA keys
#[allow(non_camel_case_types)]
pub struct keys;

impl Table for keys {
    fn string(&self) -> String {
        "keys".to_string()
    }
}

/// The columns in the keys table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// The description column. (No further description available)
    description,
    /// The from_table column. (No further description available)
    from_table,
    /// The key_id column. (No further description available)
    key_id,
    /// The target_table column. (No further description available)
    target_table,
    /// The utype column. (No further description available)
    utype,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the keys table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::description.to_string());
    col_strings.push(Col::from_table.to_string());
    col_strings.push(Col::key_id.to_string());
    col_strings.push(Col::target_table.to_string());
    col_strings.push(Col::utype.to_string());
    map.insert(keys.string(), col_strings);
}
