// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the schemas table.

use crate::traits::{Column, Table};

/// TAP SCHEMA schemas
#[allow(non_camel_case_types)]
pub struct schemas;

impl Table for schemas {
    fn string(&self) -> String {
        "schemas".to_string()
    }
}

/// The columns in the schemas table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// The db_schema_name column. (No further description available)
    db_schema_name,
    /// The description column. (No further description available)
    description,
    /// The schema_index column. (No further description available)
    schema_index,
    /// The schema_name column. (No further description available)
    schema_name,
    /// The utype column. (No further description available)
    utype,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the schemas table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::db_schema_name.to_string());
    col_strings.push(Col::description.to_string());
    col_strings.push(Col::schema_index.to_string());
    col_strings.push(Col::schema_name.to_string());
    col_strings.push(Col::utype.to_string());
    map.insert(schemas.string(), col_strings);
}
