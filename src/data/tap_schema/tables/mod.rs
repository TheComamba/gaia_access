// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the tables table.

use crate::traits::{Column, Table};

/// TAP SCHEMA tables
#[allow(non_camel_case_types)]
pub struct tables;

impl Table for tables {
    fn string(&self) -> String {
        "tables".to_string()
    }
}

/// The columns in the tables table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// The db_table_name column. (No further description available)
    db_table_name,
    /// The description column. (No further description available)
    description,
    /// The schema_name column. (No further description available)
    schema_name,
    /// The "size" column. (No further description available)
    #[strum(serialize = "\"size\"")]
    size,
    /// The size_bytes column. (No further description available)
    size_bytes,
    /// The table_index column. (No further description available)
    table_index,
    /// The table_name column. (No further description available)
    table_name,
    /// The table_type column. (No further description available)
    table_type,
    /// The utype column. (No further description available)
    utype,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the tables table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::db_table_name.to_string());
    col_strings.push(Col::description.to_string());
    col_strings.push(Col::schema_name.to_string());
    col_strings.push(Col::size.to_string());
    col_strings.push(Col::size_bytes.to_string());
    col_strings.push(Col::table_index.to_string());
    col_strings.push(Col::table_name.to_string());
    col_strings.push(Col::table_type.to_string());
    col_strings.push(Col::utype.to_string());
    map.insert(tables.string(), col_strings);
}
