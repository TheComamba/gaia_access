// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the interstellar_medium_params table.

use crate::traits::{Column, Table};

/// This is the main table of DIB parameters from DIB-Spec, derived from spectra binned in galactic latitude, longitude and distance.
#[allow(non_camel_case_types)]
pub struct interstellar_medium_params;

impl Table for interstellar_medium_params {
    fn string(&self) -> String {
        "interstellar_medium_params".to_string()
    }
}

/// The columns in the interstellar_medium_params table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// Solution Identifier
    solution_id,
    /// HEALPix identification
    healpix,
    /// Central galactic longitude of voxel
    lc,
    /// Central galactic latitude of voxel
    bc,
    /// Central heliocentric distance of voxel
    dc,
    /// Number of target stars in a voxel
    n_targets,
    /// SNR  of the stacked ISM spectrum at 862.0 nm
    snr,
    /// DIB equivalent width  at 862.0 nm
    ew8620,
    /// Lower confidence level (16%) of DIB equivalent width at 862.0 nm
    ew8620_lower,
    /// Upper confidence level (84%) of DIB equivalent width at 862.0 nm
    ew8620_upper,
    /// Quality flag of DIB parameters at 862.0 nm
    flags8620,
    /// p0 parameter at 862.0 nm
    p08620,
    /// Lower confidence level (16%) of p0 parameter at 862.0 nm
    p08620_lower,
    /// Upper confidence level (84%) of p0 parameter at 862.0 nm
    p08620_upper,
    /// p1 parameter at 862.0 nm
    p18620,
    /// Lower confidence level (16%) of p1 parameter at 862.0 nm
    p18620_lower,
    /// Upper confidence level (84%) of p1 parameter at 862.0 nm
    p18620_upper,
    /// p2 parameter at 862.0 nm
    p28620,
    /// Lower confidence level (16%) of p2 parameter at 862.0 nm
    p28620_lower,
    /// Upper confidence level (84%) of p2 parameter at 862.0 nm
    p28620_upper,
    /// DIB equivalent width at 864.8 nm
    ew8648,
    /// Lower confidence level (16%) of DIB equivalent width at 864.8 nm
    ew8648_lower,
    /// Upper confidence level (84%) of DIB equivalent width at 864.8 nm
    ew8648_upper,
    /// Quality flag of DIB parameters at 864.8 nm
    flags8648,
    /// p0 parameter at 864.8 nm
    p08648,
    /// Lower confidence level (16%) of p0 parameter at 864.8 nm
    p08648_lower,
    /// Upper confidence level (84%) of p0 parameter at 864.8 nm
    p08648_upper,
    /// p1 parameter at 864.8 nm
    p18648,
    /// Lower confidence level (16%) of p1 parameter at 864.8 nm
    p18648_lower,
    /// Upper confidence level (84%) of p1 parameter at 864.8 nm
    p18648_upper,
    /// p2 parameter at 864.8 nm
    p28648,
    /// Lower confidence level (16%) of p2 parameter at 864.8 nm
    p28648_lower,
    /// Upper confidence level (84%) of p2 parameter at 864.8 nm
    p28648_upper,
    /// Slope a0 of the global continuum fit of the full stacked spectrum
    dibcont_a0,
    /// Lower confidence level (16%) of the slope a0 of the global continuum fit
    dibcont_a0_lower,
    /// Upper confidence level (84%) of the slope a0 of the global continuum fit
    dibcont_a0_upper,
    /// Intercept a1 of the global continuum fit of the full stacked spectrum
    dibcont_a1,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the interstellar_medium_params table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::healpix.to_string());
    col_strings.push(Col::lc.to_string());
    col_strings.push(Col::bc.to_string());
    col_strings.push(Col::dc.to_string());
    col_strings.push(Col::n_targets.to_string());
    col_strings.push(Col::snr.to_string());
    col_strings.push(Col::ew8620.to_string());
    col_strings.push(Col::ew8620_lower.to_string());
    col_strings.push(Col::ew8620_upper.to_string());
    col_strings.push(Col::flags8620.to_string());
    col_strings.push(Col::p08620.to_string());
    col_strings.push(Col::p08620_lower.to_string());
    col_strings.push(Col::p08620_upper.to_string());
    col_strings.push(Col::p18620.to_string());
    col_strings.push(Col::p18620_lower.to_string());
    col_strings.push(Col::p18620_upper.to_string());
    col_strings.push(Col::p28620.to_string());
    col_strings.push(Col::p28620_lower.to_string());
    col_strings.push(Col::p28620_upper.to_string());
    col_strings.push(Col::ew8648.to_string());
    col_strings.push(Col::ew8648_lower.to_string());
    col_strings.push(Col::ew8648_upper.to_string());
    col_strings.push(Col::flags8648.to_string());
    col_strings.push(Col::p08648.to_string());
    col_strings.push(Col::p08648_lower.to_string());
    col_strings.push(Col::p08648_upper.to_string());
    col_strings.push(Col::p18648.to_string());
    col_strings.push(Col::p18648_lower.to_string());
    col_strings.push(Col::p18648_upper.to_string());
    col_strings.push(Col::p28648.to_string());
    col_strings.push(Col::p28648_lower.to_string());
    col_strings.push(Col::p28648_upper.to_string());
    col_strings.push(Col::dibcont_a0.to_string());
    col_strings.push(Col::dibcont_a0_lower.to_string());
    col_strings.push(Col::dibcont_a0_upper.to_string());
    col_strings.push(Col::dibcont_a1.to_string());
    map.insert(interstellar_medium_params.string(), col_strings);
}
