// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the lens_outlier table.

use crate::traits::{Column, Table};

/// This table contains the individual observations that have been discarded from the analysis of the gravitational lenses around the list of sourceIds tabulated in the lens candidate table. These are observations that could not be associated with any of the components assigned to the source of interest.
#[allow(non_camel_case_types)]
pub struct lens_outlier;

impl Table for lens_outlier {
    fn string(&self) -> String {
        "lens_outlier".to_string()
    }
}

/// The columns in the lens_outlier table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// Solution Identifier
    solution_id,
    /// Unique source identifier
    source_id,
    /// Counter for the outliers of each component
    outlier_id,
    /// Right ascension of each individual outlier observation
    ra_obs,
    /// Declination of each individual outlier observation
    dec_obs,
    /// Flux value of each individual outlier observation
    g_flux_obs,
    /// Flux error value of each individual outlier observation
    g_flux_obs_error,
    /// Onboard G magnitudes of each individual outlier observation
    g_mag_obs,
    /// Epoch of the individual outlier observation
    epoch_obs,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the lens_outlier table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::outlier_id.to_string());
    col_strings.push(Col::ra_obs.to_string());
    col_strings.push(Col::dec_obs.to_string());
    col_strings.push(Col::g_flux_obs.to_string());
    col_strings.push(Col::g_flux_obs_error.to_string());
    col_strings.push(Col::g_mag_obs.to_string());
    col_strings.push(Col::epoch_obs.to_string());
    map.insert(lens_outlier.string(), col_strings);
}
