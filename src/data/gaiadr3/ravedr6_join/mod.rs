// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the ravedr6_join table.

use crate::traits::{Column, Table};

/// Convenience table to be used to join RAVE DR6 catalogue with the cross-match results.
/// The table links the external catalogue original sourceId ({\tt originalExtSourceId}) to the corresponding additional numerical identifier ({\tt ravedr6Oid}).
///
/// Both {\tt originalExtSourceId} and {\tt ravedr6Oid} are present in the cross-match output tables ({\tt Ravedr6BestNeighbour} and {\tt Ravedr6Neighbourhood}).
///
/// However, in case there are suspected duplicates in the external catalogue, different {\tt originalExtSourceId} will correspond to the same {\tt ravedr6Oid}.
/// In the cross-match output table only the {\tt originalExtSourceId} of the source with the best astrometry among the suspected duplicates will be listed.
///
/// In practice, users may use the {\tt originalExtSourceId} in the original catalogue to find the matching source with the best astrometry. Users interested to find all matching suspected duplicates should instead use the {\tt ravedr6Oid} in the join with the cross-match result tables.
///
/// See Chapter~\ref{chap:crossmatch}, for more details on the duplicates in the external catalogues and their treatment in the cross-match computations.
///  
#[allow(non_camel_case_types)]
pub struct ravedr6_join;

impl Table for ravedr6_join {
    fn string(&self) -> String {
        "ravedr6_join".to_string()
    }
}

/// The columns in the ravedr6_join table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// Original External Catalogue source identifier
    original_ext_source_id,
    /// External Catalogue source identifier
    ravedr6_oid,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the ravedr6_join table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::original_ext_source_id.to_string());
    col_strings.push(Col::ravedr6_oid.to_string());
    map.insert(ravedr6_join.string(), col_strings);
}
