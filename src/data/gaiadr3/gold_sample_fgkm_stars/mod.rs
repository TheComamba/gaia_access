// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the gold_sample_fgkm_stars table.

use crate::traits::{Column, Table};

/// Stellar astrophysical parameters of the golden sample of F, G, K, and M stars from \cite{DR3-DPACP-123}.  Values are identical to the ones in the \texttt{astrophysical\_parameters} and \texttt{astrophysical\_parameters\_supp} tables, but only those values retained after filtering are copied over.
#[allow(non_camel_case_types)]
pub struct gold_sample_fgkm_stars;

impl Table for gold_sample_fgkm_stars {
    fn string(&self) -> String {
        "gold_sample_fgkm_stars".to_string()
    }
}

/// The columns in the gold_sample_fgkm_stars table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// Unique source identifier (unique within a particular Data Release)
    source_id,
    /// Effective temperature from GSP-Phot Aeneas best library using BP/RP spectra
    teff_gspphot,
    /// Surface gravity from GSP-Phot Aeneas best library using BP/RP spectra
    logg_gspphot,
    /// Global metallicity from GSP-Phot Aeneas best library using BP/RP spectra
    mh_gspphot,
    /// Extinction in G band from GSP-Phot Aeneas best library using BP/RP spectra
    ag_gspphot,
    /// Reddening E(BP-RP) from GSP-Phot Aeneas best library using BP/RP spectra
    ebpminrp_gspphot,
    /// Median abundance of alpha-elements [alphe/Fe] with respect to iron from GSP-Spec MatisseGauguin using RVS spectra and monte carlo realizations
    alphafe_gspspec,
    /// Median value of the effective temperature from GSP-Spec MatisseGauguin monte carlo realizations using RVS spectra
    teff_gspspec,
    /// Median value of logarithm of the stellar surface gravity using RVS spectra and monte carlo realizations
    logg_gspspec,
    /// Median global metallicity [M/H] from GSP-Spec MatisseGauguin using RVS spectra and monte carlo realizations
    mh_gspspec,
    /// Radius of the star derived from FLAME using teffGspphot and lumFlame
    radius_flame,
    /// Luminosity of the star from FLAME using G band magnitude, extinction (agGspphot),  parallax and a bolometric correction (bcFlame)
    lum_flame,
    /// Mass of the star from FLAME using stellar models, lumFlame, and teffGspphot
    mass_flame,
    /// Age of the star from FLAME using stellar models, see massFlame for details
    age_flame,
    /// Evolutionary stage of the star derived from FLAME using stellar models, see massFlame for details
    evolstage_flame,
    /// Radius of the star from FLAME using teffGspspec and lumFlameSpec
    radius_flame_spec,
    /// Luminosity of the star from FLAME using G band magnitude, extinction (agGspphot),  parallax and a bolometric correction (bcFlameSpec)
    lum_flame_spec,
    /// Mass of the star from FLAME using stellar models, lumFlameSpec, and teffGspspec
    mass_flame_spec,
    /// Age of the star from FLAME using stellar models, see massFlameSpec for details
    age_flame_spec,
    /// Evolutionary stage of the star derived from FLAME using stellar models, see massFlameSpec for details
    evolstage_flame_spec,
    /// Spectral type from ESP-HS
    spectraltype_esphs,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the gold_sample_fgkm_stars table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::teff_gspphot.to_string());
    col_strings.push(Col::logg_gspphot.to_string());
    col_strings.push(Col::mh_gspphot.to_string());
    col_strings.push(Col::ag_gspphot.to_string());
    col_strings.push(Col::ebpminrp_gspphot.to_string());
    col_strings.push(Col::alphafe_gspspec.to_string());
    col_strings.push(Col::teff_gspspec.to_string());
    col_strings.push(Col::logg_gspspec.to_string());
    col_strings.push(Col::mh_gspspec.to_string());
    col_strings.push(Col::radius_flame.to_string());
    col_strings.push(Col::lum_flame.to_string());
    col_strings.push(Col::mass_flame.to_string());
    col_strings.push(Col::age_flame.to_string());
    col_strings.push(Col::evolstage_flame.to_string());
    col_strings.push(Col::radius_flame_spec.to_string());
    col_strings.push(Col::lum_flame_spec.to_string());
    col_strings.push(Col::mass_flame_spec.to_string());
    col_strings.push(Col::age_flame_spec.to_string());
    col_strings.push(Col::evolstage_flame_spec.to_string());
    col_strings.push(Col::spectraltype_esphs.to_string());
    map.insert(gold_sample_fgkm_stars.string(), col_strings);
}
