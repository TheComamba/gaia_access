// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the vari_planetary_transit table.

use crate::traits::{Column, Table};

/// This table describes the Planetary Transit candidate events.
#[allow(non_camel_case_types)]
pub struct vari_planetary_transit;

impl Table for vari_planetary_transit {
    fn string(&self) -> String {
        "vari_planetary_transit".to_string()
    }
}

/// The columns in the vari_planetary_transit table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// Solution Identifier
    solution_id,
    /// Unique source identifier
    source_id,
    /// Mid-transit reference time
    transit_reference_time,
    /// Most probable transit period
    transit_period,
    /// Transit depth
    transit_depth,
    /// Transit duration
    transit_duration,
    /// Number of in-transit observations
    num_in_transit,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the vari_planetary_transit table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::transit_reference_time.to_string());
    col_strings.push(Col::transit_period.to_string());
    col_strings.push(Col::transit_depth.to_string());
    col_strings.push(Col::transit_duration.to_string());
    col_strings.push(Col::num_in_transit.to_string());
    map.insert(vari_planetary_transit.string(), col_strings);
}
