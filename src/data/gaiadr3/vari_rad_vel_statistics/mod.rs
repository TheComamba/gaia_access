// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the vari_rad_vel_statistics table.

use crate::traits::{Column, Table};

/// Statistical parameters of radial velocity time series, using only transits not rejected, see {\tt rejectedByVariability} column in {\tt VariEpochRadialVelocity}.
///
/// Note that NaN will be reported when the parameter value is missing or cannot be calculated.
#[allow(non_camel_case_types)]
pub struct vari_rad_vel_statistics;

impl Table for vari_rad_vel_statistics {
    fn string(&self) -> String {
        "vari_rad_vel_statistics".to_string()
    }
}

/// The columns in the vari_rad_vel_statistics table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// Solution Identifier
    solution_id,
    /// Unique source identifier
    source_id,
    /// Total number of radial velocity transits selected for variability analysis
    num_selected_rv,
    /// Mean observation time for radial velocity transits
    mean_obs_time_rv,
    /// Time duration of the time series for radial velocity transits
    time_duration_rv,
    /// Minimum radial velocity
    min_rv,
    /// Maximum radial velocity
    max_rv,
    /// Mean radial velocity
    mean_rv,
    /// Median radial velocity
    median_rv,
    /// Difference between the highest and lowest radial velocity transits
    range_rv,
    /// Square root of the unweighted radial velocity variance
    std_dev_rv,
    /// Standardized unweighted radial velocity skewness
    skewness_rv,
    /// Standardized unweighted radial velocity kurtosis
    kurtosis_rv,
    /// Median Absolute Deviation (MAD) for radial velocity transits
    mad_rv,
    /// Abbe value for radial velocity transits
    abbe_rv,
    /// Interquartile range for radial velocity transits
    iqr_rv,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the vari_rad_vel_statistics table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::solution_id.to_string());
    col_strings.push(Col::source_id.to_string());
    col_strings.push(Col::num_selected_rv.to_string());
    col_strings.push(Col::mean_obs_time_rv.to_string());
    col_strings.push(Col::time_duration_rv.to_string());
    col_strings.push(Col::min_rv.to_string());
    col_strings.push(Col::max_rv.to_string());
    col_strings.push(Col::mean_rv.to_string());
    col_strings.push(Col::median_rv.to_string());
    col_strings.push(Col::range_rv.to_string());
    col_strings.push(Col::std_dev_rv.to_string());
    col_strings.push(Col::skewness_rv.to_string());
    col_strings.push(Col::kurtosis_rv.to_string());
    col_strings.push(Col::mad_rv.to_string());
    col_strings.push(Col::abbe_rv.to_string());
    col_strings.push(Col::iqr_rv.to_string());
    map.insert(vari_rad_vel_statistics.string(), col_strings);
}
