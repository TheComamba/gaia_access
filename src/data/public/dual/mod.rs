// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the dual table.

use crate::traits::{Column, Table};

/// The DUAL table is a special one-row, one-column table present in several database <a href="https://en.wikipedia.org/wiki/DUAL_table">installations</a>. It is useful to compute queries that do not require any tables (like mathematical operations) and other specific queries, like the build-in positional cross-match offered in this Archive (see the Query examples available in <a href="https://www.cosmos.esa.int/web/gaia-users/archive/writing-queries">here</a>).
#[allow(non_camel_case_types)]
pub struct dual;

impl Table for dual {
    fn string(&self) -> String {
        "dual".to_string()
    }
}

/// The columns in the dual table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// The dummy column. (No further description available)
    dummy,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the dual table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::dummy.to_string());
    map.insert(dual.string(), col_strings);
}
