// This code is generated by generate_code.py, do not modify it manually.

//! This module contains all the known columns in the hipparcos table.

use crate::traits::{Column, Table};

/// hipparcos original catalogue (J1991.25)
#[allow(non_camel_case_types)]
pub struct hipparcos;

impl Table for hipparcos {
    fn string(&self) -> String {
        "hipparcos".to_string()
    }
}

/// The columns in the hipparcos table.
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, strum::Display)]
pub enum Col {
    /// Identifier (HIP number) (H1)
    hip,
    /// [HT] Proximity flag (H2)
    proxy,
    /// Right ascension in h m s, ICRS (J1991.25) (H3)
    rahms,
    /// Declination in deg ' ", ICRS (J1991.25) (H4)
    dedms,
    /// ? Magnitude in Johnson V (H5)
    vmag,
    /// [1,3]? Coarse variability flag (H6)
    varflag,
    /// [GHT] Source of magnitude (H7)
    r_vmag,
    /// ? alpha, degrees (ICRS, Epoch=J1991.25) (H8)
    ra,
    /// ? delta, degrees (ICRS, Epoch=J1991.25) (H9)
    de,
    /// [*+A-Z] Reference flag for astrometry (H10)
    astroref,
    /// ? Trigonometric parallax (H11)
    plx,
    /// *? Proper motion mu_alpha.cos(delta), ICRS(H12)
    pmra,
    /// *? Proper motion mu_delta, ICRS (H13)
    pmde,
    /// *? Standard error in RA*cos(DEdeg) (H14)
    e_radeg,
    /// *? Standard error in DE (H15)
    e_dedeg,
    /// ? Standard error in Plx (H16)
    e_plx,
    /// ? Standard error in pmRA (H17)
    e_pmra,
    /// ? Standard error in pmDE (H18)
    e_pmde,
    /// [-1/1]? Correlation, DE/RA*cos(delta) (H19)
    dera,
    /// [-1/1]? Correlation, Plx/RA*cos(delta) (H20)
    plxra,
    /// [-1/1]? Correlation, Plx/DE (H21)
    plxde,
    /// [-1/1]? Correlation, pmRA/RA*cos(delta) (H22)
    pmrara,
    /// [-1/1]? Correlation, pmRA/DE (H23)
    pmrade,
    /// [-1/1]? Correlation, pmRA/Plx (H24)
    pmraplx,
    /// [-1/1]? Correlation, pmDE/RA*cos(delta) (H25)
    pmdera,
    /// [-1/1]? Correlation, pmDE/DE (H26)
    pmdede,
    /// [-1/1]? Correlation, pmDE/Plx (H27)
    pmdeplx,
    /// [-1/1]? Correlation, pmDE/pmRA (H28)
    pmdepmra,
    /// ? Percentage of rejected data (H29)
    f1,
    /// ? Goodness-of-fit parameter (H30)
    f2,
    /// ? Mean BT magnitude (H32)
    btmag,
    /// ? Standard error on BTmag (H33)
    e_btmag,
    /// ? Mean VT magnitude (H34)
    vtmag,
    /// ? Standard error on VTmag (H35)
    e_vtmag,
    /// [A-Z*-] Reference flag for BT and VTmag (H36)
    m_btmag,
    /// ? Johnson B-V colour (H37)
    b_v,
    /// ? Standard error on B-V (H38)
    e_b_v,
    /// [GT] Source of B-V from Ground or Tycho (H39)
    r_b_v,
    /// ? Colour index in Cousins' system (H40)
    v_i,
    /// ? Standard error on V-I (H41)
    e_v_i,
    /// [A-T] Source of V-I (H42)
    r_v_i,
    /// [*] Flag for combined Vmag, B-V, V-I (H43)
    combmag,
    /// ? Median magnitude in Hipparcos system (H44)
    hpmag,
    /// ? Standard error on Hpmag (H45)
    e_hpmag,
    /// ? Scatter on Hpmag (H46)
    hpscat,
    /// ? Number of observations for Hpmag (H47)
    o_hpmag,
    /// [A-Z*-] Reference flag for Hpmag (H48)
    m_hpmag,
    /// ? Hpmag at maximum (5th percentile) (H49)
    hpmax,
    /// ? Hpmag at minimum (95th percentile) (H50)
    hpmin,
    /// ? Variability period (days) (H51)
    period,
    /// [CDMPRU]? variability type (H52)
    hvartype,
    /// [12] Additional data about variability (H53)
    morevar,
    /// [ABC] Light curve Annex (H54)
    morephoto,
    /// CCDM identifier (H55)
    ccdm,
    /// [HIM] Historical status flag (H56)
    n_ccdm,
    /// ? Number of entries with same CCDM (H57)
    nsys,
    /// ? Number of components in this entry (H58)
    ncomp,
    /// [CGOVX] Double/Multiple Systems flag (H59)
    multflag,
    /// [PFILS] Astrometric source flag (H60)
    source,
    /// [ABCDS] Solution quality (H61)
    qual,
    /// Component identifiers (H62)
    m_hip,
    /// ? Position angle between components (H63)
    theta,
    /// ? Angular separation between components (H64)
    rho,
    /// ? Standard error on rho (H65)
    e_rho,
    /// ? Magnitude difference of components (H66)
    dhp,
    /// ? Standard error on dHp (H67)
    e_dhp,
    /// [S] Flag indicating a Survey Star (H68)
    survey,
    /// [DG] Identification Chart (H69)
    chart,
    /// [DGPWXYZ] Existence of notes (H70)
    notes,
    /// [1/359083]? HD number (H71)
    hd,
    /// Bonner DM (H72)
    bd,
    /// Cordoba Durchmusterung (DM) (H73)
    cod,
    /// Cape Photographic DM (H74)
    cpd,
    /// V-I used for reductions (H75)
    v_ired,
    /// Spectral type (H76)
    sptype,
    /// [1234GKSX]? Source of spectral type (H77)
    r_sptype,
}

impl Column for Col {}

#[cfg(test)]
/// Collects all the known columns in the hipparcos table.
pub fn collect_known(map: &mut std::collections::HashMap<String, Vec<String>>) {
    let mut col_strings = Vec::new();
    col_strings.push(Col::hip.to_string());
    col_strings.push(Col::proxy.to_string());
    col_strings.push(Col::rahms.to_string());
    col_strings.push(Col::dedms.to_string());
    col_strings.push(Col::vmag.to_string());
    col_strings.push(Col::varflag.to_string());
    col_strings.push(Col::r_vmag.to_string());
    col_strings.push(Col::ra.to_string());
    col_strings.push(Col::de.to_string());
    col_strings.push(Col::astroref.to_string());
    col_strings.push(Col::plx.to_string());
    col_strings.push(Col::pmra.to_string());
    col_strings.push(Col::pmde.to_string());
    col_strings.push(Col::e_radeg.to_string());
    col_strings.push(Col::e_dedeg.to_string());
    col_strings.push(Col::e_plx.to_string());
    col_strings.push(Col::e_pmra.to_string());
    col_strings.push(Col::e_pmde.to_string());
    col_strings.push(Col::dera.to_string());
    col_strings.push(Col::plxra.to_string());
    col_strings.push(Col::plxde.to_string());
    col_strings.push(Col::pmrara.to_string());
    col_strings.push(Col::pmrade.to_string());
    col_strings.push(Col::pmraplx.to_string());
    col_strings.push(Col::pmdera.to_string());
    col_strings.push(Col::pmdede.to_string());
    col_strings.push(Col::pmdeplx.to_string());
    col_strings.push(Col::pmdepmra.to_string());
    col_strings.push(Col::f1.to_string());
    col_strings.push(Col::f2.to_string());
    col_strings.push(Col::btmag.to_string());
    col_strings.push(Col::e_btmag.to_string());
    col_strings.push(Col::vtmag.to_string());
    col_strings.push(Col::e_vtmag.to_string());
    col_strings.push(Col::m_btmag.to_string());
    col_strings.push(Col::b_v.to_string());
    col_strings.push(Col::e_b_v.to_string());
    col_strings.push(Col::r_b_v.to_string());
    col_strings.push(Col::v_i.to_string());
    col_strings.push(Col::e_v_i.to_string());
    col_strings.push(Col::r_v_i.to_string());
    col_strings.push(Col::combmag.to_string());
    col_strings.push(Col::hpmag.to_string());
    col_strings.push(Col::e_hpmag.to_string());
    col_strings.push(Col::hpscat.to_string());
    col_strings.push(Col::o_hpmag.to_string());
    col_strings.push(Col::m_hpmag.to_string());
    col_strings.push(Col::hpmax.to_string());
    col_strings.push(Col::hpmin.to_string());
    col_strings.push(Col::period.to_string());
    col_strings.push(Col::hvartype.to_string());
    col_strings.push(Col::morevar.to_string());
    col_strings.push(Col::morephoto.to_string());
    col_strings.push(Col::ccdm.to_string());
    col_strings.push(Col::n_ccdm.to_string());
    col_strings.push(Col::nsys.to_string());
    col_strings.push(Col::ncomp.to_string());
    col_strings.push(Col::multflag.to_string());
    col_strings.push(Col::source.to_string());
    col_strings.push(Col::qual.to_string());
    col_strings.push(Col::m_hip.to_string());
    col_strings.push(Col::theta.to_string());
    col_strings.push(Col::rho.to_string());
    col_strings.push(Col::e_rho.to_string());
    col_strings.push(Col::dhp.to_string());
    col_strings.push(Col::e_dhp.to_string());
    col_strings.push(Col::survey.to_string());
    col_strings.push(Col::chart.to_string());
    col_strings.push(Col::notes.to_string());
    col_strings.push(Col::hd.to_string());
    col_strings.push(Col::bd.to_string());
    col_strings.push(Col::cod.to_string());
    col_strings.push(Col::cpd.to_string());
    col_strings.push(Col::v_ired.to_string());
    col_strings.push(Col::sptype.to_string());
    col_strings.push(Col::r_sptype.to_string());
    map.insert(hipparcos.string(), col_strings);
}
